# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PresignedUploadPayload {
  fileId: String!
  url: String!
  fields: [AwsS3UploadDataField!]!
}

type AwsS3UploadDataField {
  key: String!
  value: String!
}

type PresignedImageAssetPayload {
  url: String!
}

type User {
  id: String!
  email: String!
}

type UserGraphModelEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  edges: [UserGraphModelEdge!]
  nodes: [User!]
  pageInfo: PaginationPageInfo!
}

type PaginationPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type CreateSubscriptionResponse {
  id: String!
}

type Query {
  user(id: String!): User!
  allUsers(input: ConnectionArguments = {first: 5}): UserConnection!
  viewer: User!
  presignedImageAccess(input: AccessImageByKeyInput!): PresignedImageAssetPayload!
  presignedUpload(input: AwsS3UploadOptions!): PresignedUploadPayload!
  getBillingPortalSessionURL: String!
}

input ConnectionArguments {
  first: Int
  after: String
  last: Int
  before: String
}

input AccessImageByKeyInput {
  key: String!
}

input AwsS3UploadOptions {
  type: String!
  size: Int!
  fileName: String!
  fileId: String!
}

type Mutation {
  changePassword(input: UpdatePasswordInput!): ChangePasswordResult!
  createCheckoutSession(input: CreateSubscriptionInput!): CreateSubscriptionResponse!
}

union ChangePasswordResult = UpdatePasswordSuccess | UpdatePasswordFailed

type UpdatePasswordSuccess {
  message: String!
}

type UpdatePasswordFailed {
  message: String!
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input CreateSubscriptionInput {
  plan: SubscriptionPlan!
}

enum SubscriptionPlan {
  PREMIUM_MONTHLY
  PREMIUM_ANNUAL
}
